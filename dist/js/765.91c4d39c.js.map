{"version":3,"file":"js/765.91c4d39c.js","mappings":"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","sources":["webpack://msh22/./src/api/RegionsApi.js","webpack://msh22/./src/store/modules/Regions.js","webpack://msh22/./src/components/SelectRegion.vue?9c52","webpack://msh22/src/components/SelectRegion.vue","webpack://msh22/./src/components/SelectRegion.vue?0e7c","webpack://msh22/../../../src/components/VAutocomplete/VAutocomplete.ts","webpack://msh22/./src/components/SelectRegion.vue"],"sourcesContent":["import API from './Api';\n\nclass RegionsApi {\n  static getColumns() {\n    return API.request({\n      method: 'GET',\n      url: 'api/v1/regions/getList',\n    });\n  }\n}\n\nexport default RegionsApi;\n","import RegionsApi from '@/api/RegionsApi';\n\nexport default {\n  namespaced: true,\n\n  state: {\n    list: [],\n  },\n\n  mutations: {\n    setList(state, data) {\n      state.list = data;\n    },\n  },\n\n  actions: {\n    async fetchList({ commit }) {\n      try {\n        const { data } = await RegionsApi.getColumns();\n        commit('setList', data);\n      } catch (error) {\n        console.log(error);\n      }\n    },\n  },\n\n  getters: {\n    getList(state) {\n      return state.list;\n    },\n  },\n};\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-autocomplete',{attrs:{\"items\":_vm.items,\"item-text\":\"region\",\"item-value\":\"id_region\",\"label\":\"Регион\",\"placeholder\":\"Начните печатать\",\"outlined\":\"\",\"rounded\":\"\",\"dense\":\"\",\"clearable\":\"\"},model:{value:(_vm.region),callback:function ($$v) {_vm.region=$$v},expression:\"region\"}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <v-autocomplete\n    v-model=\"region\"\n    :items=\"items\"\n    item-text=\"region\"\n    item-value=\"id_region\"\n    label=\"Регион\"\n    placeholder=\"Начните печатать\"\n    outlined\n    rounded\n    dense\n    clearable\n  ></v-autocomplete>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex';\nimport RegionsModule from '@/store/modules/Regions';\n\nexport default {\n  name: 'SelectRegion',\n  props: {\n    value: [String, Number],\n  },\n  data() {\n    return {\n      region: null,\n    };\n  },\n  computed: {\n    ...mapGetters('Regions', ['getList']),\n    items() {\n      return this.getList;\n    },\n  },\n  watch: {\n    value: {\n      immediate: true,\n      handler(val) {\n        this.region = val;\n      },\n    },\n    region: {\n      handler(region) {\n        this.$emit('input', region);\n      },\n    },\n  },\n  methods: {\n    ...mapActions('Regions', ['fetchList']),\n  },\n  created() {\n    this.fetchList();\n  },\n  beforeCreate() {\n    if (!this.$store.hasModule('Regions')) this.$store.registerModule('Regions', RegionsModule);\n  },\n  destroyed() {\n    if (this.$store.hasModule('Regions')) this.$store.unregisterModule('Regions');\n  },\n};\n</script>\n\n<style>\n\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SelectRegion.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./SelectRegion.vue?vue&type=script&lang=js&\"","// Styles\nimport './VAutocomplete.sass'\n\n// Extensions\nimport VSelect, { defaultMenuProps as VSelectMenuProps } from '../VSelect/VSelect'\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mergeData from '../../util/mergeData'\nimport {\n  getObjectValueByPath,\n  getPropertyFromItem,\n  keyCodes,\n} from '../../util/helpers'\n\n// Types\nimport { PropType, VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\nconst defaultMenuProps = {\n  ...VSelectMenuProps,\n  offsetY: true,\n  offsetOverflow: true,\n  transition: false,\n}\n\n/* @vue/component */\nexport default VSelect.extend({\n  name: 'v-autocomplete',\n\n  props: {\n    allowOverflow: {\n      type: Boolean,\n      default: true,\n    },\n    autoSelectFirst: {\n      type: Boolean,\n      default: false,\n    },\n    filter: {\n      type: Function,\n      default: (item: any, queryText: string, itemText: string) => {\n        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1\n      },\n    } as PropValidator<(item: any, queryText: string, itemText: string) => boolean>,\n    hideNoData: Boolean,\n    menuProps: {\n      type: VSelect.options.props.menuProps.type,\n      default: () => defaultMenuProps,\n    },\n    noFilter: Boolean,\n    searchInput: {\n      type: String as PropType<string | null>,\n    },\n  },\n\n  data () {\n    return {\n      lazySearch: this.searchInput,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VSelect.options.computed.classes.call(this),\n        'v-autocomplete': true,\n        'v-autocomplete--is-selecting-index': this.selectedIndex > -1,\n      }\n    },\n    computedItems (): object[] {\n      return this.filteredItems\n    },\n    selectedValues (): object[] {\n      return this.selectedItems.map(item => this.getValue(item))\n    },\n    hasDisplayedItems (): boolean {\n      return this.hideSelected\n        ? this.filteredItems.some(item => !this.hasItem(item))\n        : this.filteredItems.length > 0\n    },\n    currentRange (): number {\n      if (this.selectedItem == null) return 0\n\n      return String(this.getText(this.selectedItem)).length\n    },\n    filteredItems (): object[] {\n      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems\n\n      return this.allItems.filter(item => {\n        const value = getPropertyFromItem(item, this.itemText)\n        const text = value != null ? String(value) : ''\n\n        return this.filter(item, String(this.internalSearch), text)\n      })\n    },\n    internalSearch: {\n      get (): string | null {\n        return this.lazySearch\n      },\n      set (val: any) { // TODO: this should be `string | null` but it breaks lots of other types\n        // emit update event only when the new\n        // search value is different from previous\n        if (this.lazySearch !== val) {\n          this.lazySearch = val\n          this.$emit('update:search-input', val)\n        }\n      },\n    },\n    isAnyValueAllowed (): boolean {\n      return false\n    },\n    isDirty (): boolean {\n      return this.searchIsDirty || this.selectedItems.length > 0\n    },\n    isSearching (): boolean {\n      return (\n        this.multiple &&\n        this.searchIsDirty\n      ) || (\n        this.searchIsDirty &&\n        this.internalSearch !== this.getText(this.selectedItem)\n      )\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems || !this.hideNoData\n    },\n    $_menuProps (): object {\n      const props = VSelect.options.computed.$_menuProps.call(this);\n      (props as any).contentClass = `v-autocomplete__content ${(props as any).contentClass || ''}`.trim()\n      return {\n        ...defaultMenuProps,\n        ...props,\n      }\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null &&\n        this.internalSearch !== ''\n    },\n    selectedItem (): any {\n      if (this.multiple) return null\n\n      return this.selectedItems.find(i => {\n        return this.valueComparator(this.getValue(i), this.getValue(this.internalValue))\n      })\n    },\n    listData () {\n      const data = VSelect.options.computed.listData.call(this) as any\n\n      data.props = {\n        ...data.props,\n        items: this.virtualizedItems,\n        noFilter: (\n          this.noFilter ||\n          !this.isSearching ||\n          !this.filteredItems.length\n        ),\n        searchInput: this.internalSearch,\n      }\n\n      return data\n    },\n  },\n\n  watch: {\n    filteredItems: 'onFilteredItemsChanged',\n    internalValue: 'setSearch',\n    isFocused (val) {\n      if (val) {\n        document.addEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.select()\n      } else {\n        document.removeEventListener('copy', this.onCopy)\n        this.blur()\n        this.updateSelf()\n      }\n    },\n    isMenuActive (val) {\n      if (val || !this.hasSlot) return\n\n      this.lazySearch = null\n    },\n    items (val, oldVal) {\n      // If we are focused, the menu\n      // is not active, hide no data is enabled,\n      // and items change\n      // User is probably async loading\n      // items, try to activate the menu\n      if (\n        !(oldVal && oldVal.length) &&\n        this.hideNoData &&\n        this.isFocused &&\n        !this.isMenuActive &&\n        val.length\n      ) this.activateMenu()\n    },\n    searchInput (val: string) {\n      this.lazySearch = val\n    },\n    internalSearch: 'onInternalSearchChanged',\n    itemText: 'updateSelf',\n  },\n\n  created () {\n    this.setSearch()\n  },\n\n  destroyed () {\n    document.removeEventListener('copy', this.onCopy)\n  },\n\n  methods: {\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      // TODO: How is the watcher triggered\n      // for duplicate items? no idea\n      if (val === oldVal) return\n\n      if (!this.autoSelectFirst) {\n        const preSelectedItem = oldVal[this.$refs.menu.listIndex]\n\n        if (preSelectedItem) {\n          this.setMenuIndex(val.findIndex(i => i === preSelectedItem))\n        } else {\n          this.setMenuIndex(-1)\n        }\n        this.$emit('update:list-index', this.$refs.menu.listIndex)\n      }\n\n      this.$nextTick(() => {\n        if (\n          !this.internalSearch ||\n          (val.length !== 1 &&\n            !this.autoSelectFirst)\n        ) return\n\n        this.$refs.menu.getTiles()\n\n        if (this.autoSelectFirst && val.length) {\n          this.setMenuIndex(0)\n          this.$emit('update:list-index', this.$refs.menu.listIndex)\n        }\n      })\n    },\n    onInternalSearchChanged () {\n      this.updateMenuDimensions()\n    },\n    updateMenuDimensions () {\n      // Type from menuable is not making it through\n      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions()\n    },\n    changeSelectedIndex (keyCode: number) {\n      // Do not allow changing of selectedIndex\n      // when search is dirty\n      if (this.searchIsDirty) return\n\n      if (this.multiple && keyCode === keyCodes.left) {\n        if (this.selectedIndex === -1) {\n          this.selectedIndex = this.selectedItems.length - 1\n        } else {\n          this.selectedIndex--\n        }\n      } else if (this.multiple && keyCode === keyCodes.right) {\n        if (this.selectedIndex >= this.selectedItems.length - 1) {\n          this.selectedIndex = -1\n        } else {\n          this.selectedIndex++\n        }\n      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {\n        this.deleteCurrentItem()\n      }\n    },\n    deleteCurrentItem () {\n      const curIndex = this.selectedIndex\n      const curItem = this.selectedItems[curIndex]\n\n      // Do nothing if input or item is disabled\n      if (\n        !this.isInteractive ||\n        this.getDisabled(curItem)\n      ) return\n\n      const lastIndex = this.selectedItems.length - 1\n\n      // Select the last item if\n      // there is no selection\n      if (\n        this.selectedIndex === -1 &&\n        lastIndex !== 0\n      ) {\n        this.selectedIndex = lastIndex\n\n        return\n      }\n\n      const length = this.selectedItems.length\n      const nextIndex = curIndex !== length - 1\n        ? curIndex\n        : curIndex - 1\n      const nextItem = this.selectedItems[nextIndex]\n\n      if (!nextItem) {\n        this.setValue(this.multiple ? [] : null)\n      } else {\n        this.selectItem(curItem)\n      }\n\n      this.selectedIndex = nextIndex\n    },\n    clearableCallback () {\n      this.internalSearch = null\n\n      VSelect.options.methods.clearableCallback.call(this)\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data = mergeData(input.data!, {\n        attrs: {\n          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),\n          autocomplete: getObjectValueByPath(input.data!, 'attrs.autocomplete', 'off'),\n        },\n        domProps: { value: this.internalSearch },\n      })\n\n      return input\n    },\n    genInputSlot () {\n      const slot = VSelect.options.methods.genInputSlot.call(this)\n\n      slot.data!.attrs!.role = 'combobox'\n\n      return slot\n    },\n    genSelections (): VNode | never[] {\n      return this.hasSlot || this.multiple\n        ? VSelect.options.methods.genSelections.call(this)\n        : []\n    },\n    onClick (e: MouseEvent) {\n      if (!this.isInteractive) return\n\n      this.selectedIndex > -1\n        ? (this.selectedIndex = -1)\n        : this.onFocus()\n\n      if (!this.isAppendInner(e.target)) this.activateMenu()\n    },\n    onInput (e: Event) {\n      if (\n        this.selectedIndex > -1 ||\n        !e.target\n      ) return\n\n      const target = e.target as HTMLInputElement\n      const value = target.value\n\n      // If typing and menu is not currently active\n      if (target.value) this.activateMenu()\n\n      if (!this.multiple && value === '') this.deleteCurrentItem()\n\n      this.internalSearch = value\n      this.badInput = target.validity && target.validity.badInput\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onSpaceDown (e: KeyboardEvent) { /* noop */ },\n    onTabDown (e: KeyboardEvent) {\n      VSelect.options.methods.onTabDown.call(this, e)\n      this.updateSelf()\n    },\n    onUpDown (e: Event) {\n      // Prevent screen from scrolling\n      e.preventDefault()\n\n      // For autocomplete / combobox, cycling\n      // interfers with native up/down behavior\n      // instead activate the menu\n      this.activateMenu()\n    },\n    selectItem (item: object) {\n      VSelect.options.methods.selectItem.call(this, item)\n      this.setSearch()\n    },\n    setSelectedItems () {\n      VSelect.options.methods.setSelectedItems.call(this)\n\n      // #4273 Don't replace if searching\n      // #4403 Don't replace if focused\n      if (!this.isFocused) this.setSearch()\n    },\n    setSearch () {\n      // Wait for nextTick so selectedItem\n      // has had time to update\n      this.$nextTick(() => {\n        if (\n          !this.multiple ||\n          !this.internalSearch ||\n          !this.isMenuActive\n        ) {\n          this.internalSearch = (\n            !this.selectedItems.length ||\n            this.multiple ||\n            this.hasSlot\n          )\n            ? null\n            : this.getText(this.selectedItem)\n        }\n      })\n    },\n    updateSelf () {\n      if (\n        !this.searchIsDirty &&\n        !this.internalValue\n      ) return\n\n      if (\n        !this.multiple &&\n        !this.valueComparator(\n          this.internalSearch,\n          this.getValue(this.internalValue)\n        )\n      ) {\n        this.setSearch()\n      }\n    },\n    hasItem (item: any): boolean {\n      return this.selectedValues.indexOf(this.getValue(item)) > -1\n    },\n    onCopy (event: ClipboardEvent) {\n      if (this.selectedIndex === -1) return\n\n      const currentItem = this.selectedItems[this.selectedIndex]\n      const currentItemText = this.getText(currentItem)\n      event.clipboardData?.setData('text/plain', currentItemText)\n      event.clipboardData?.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText)\n      event.preventDefault()\n    },\n  },\n})\n","import { render, staticRenderFns } from \"./SelectRegion.vue?vue&type=template&id=497f2545&\"\nimport script from \"./SelectRegion.vue?vue&type=script&lang=js&\"\nexport * from \"./SelectRegion.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VAutocomplete } from 'vuetify/lib/components/VAutocomplete';\ninstallComponents(component, {VAutocomplete})\n"],"names":["RegionsApi","API","method","url","namespaced","state","list","mutations","setList","data","actions","async","commit","error","console","log","getters","getList","render","_vm","this","_h","$createElement","_c","_self","attrs","items","model","value","callback","$$v","region","expression","staticRenderFns","name","props","computed","watch","immediate","handler","methods","created","beforeCreate","destroyed","defaultMenuProps","VSelectMenuProps","offsetY","offsetOverflow","transition","VSelect","allowOverflow","type","Boolean","default","autoSelectFirst","filter","Function","item","queryText","itemText","toLocaleLowerCase","indexOf","hideNoData","menuProps","noFilter","searchInput","String","lazySearch","classes","selectedIndex","computedItems","filteredItems","selectedValues","selectedItems","map","getValue","hasDisplayedItems","hideSelected","some","hasItem","length","currentRange","selectedItem","getText","isSearching","internalSearch","allItems","getPropertyFromItem","text","get","set","val","$emit","isAnyValueAllowed","isDirty","searchIsDirty","multiple","menuCanShow","isFocused","$_menuProps","contentClass","trim","find","i","valueComparator","internalValue","listData","virtualizedItems","document","addEventListener","onCopy","$refs","input","select","removeEventListener","blur","updateSelf","isMenuActive","hasSlot","oldVal","activateMenu","setSearch","onFilteredItemsChanged","preSelectedItem","menu","listIndex","setMenuIndex","findIndex","$nextTick","getTiles","onInternalSearchChanged","updateMenuDimensions","updateDimensions","changeSelectedIndex","keyCode","keyCodes","deleteCurrentItem","curIndex","curItem","isInteractive","getDisabled","lastIndex","nextIndex","nextItem","selectItem","setValue","clearableCallback","genInput","VTextField","mergeData","getObjectValueByPath","autocomplete","domProps","genInputSlot","slot","role","genSelections","onClick","e","onFocus","isAppendInner","target","onInput","badInput","validity","onKeyDown","ctrlKey","includes","onSpaceDown","onTabDown","onUpDown","preventDefault","setSelectedItems","event","currentItem","currentItemText","clipboardData","setData","component","VAutocomplete"],"sourceRoot":""}